seasonplot(Asales,main="Seasonal plot: A sales",
year.labels.left = TRUE,
col=1:20, pch=19,lwd=2)
library(fpp)
library(knitr)
library(vars)
library(forecastHybrid)
library(rmarkdown)
library(xts)
require(forecast)
require(xts)
require(ggplot2)
library(TSstudio)
library(readr
# set training data, test data
train<-window(Asales,start=c(2008,1), end=c(2016,4))
#set training data, test data
train<-window(Asales,start=c(2008,1), end=c(2016,4))
Asales <- ts(IngresosApple, start = c(2008,1), end = c(2017,1),frequency = 4)
library(fpp)
library(knitr)
library(vars)
library(forecastHybrid)
library(rmarkdown)
library(xts)
require(forecast)
require(xts)
require(ggplot2)
library(TSstudio)
library(readr)
IngresosApple <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
Asales <- ts(IngresosApple, start = c(2008,1), end = c(2017,1),frequency = 4)
#set training data, test data
train<-window(Asales,start=c(2008,1), end=c(2016,4))
# test period
test<-window(Asales,start=2017)
# number of steps to forecast
h = length(test)
# out of sample forecast
h2 = 6
ts_info(Asales)
ts_plot(Asales,
title = "Quaterly Sales 2008-2017",
Ytitle = "",
Xtitle = "Quaterly Sales 2008-2017",
slider = TRUE)
seasonplot(Asales,main="Seasonal plot: A sales",
year.labels.left = TRUE,
col=1:20, pch=19,lwd=2)
View(Asales)
Asales <- ts(IngresosApple, start = c(2008), end = c(2017),frequency = 4)
View(Asales)
Asales <- xts(IngresosApple, order.by = "trimestre",)
Asales <- xts(IngresosApple$Ingresos, order.by = IngresosApple$Trimestre ,)
Asales <- as.yearqtr(IngresosApple$Trimestre, format = "%Y-%m-%d")
Asales <- format(IngresosApple, format = "%y/0%q")
yq
Asales
Asales <- format(IngresosApple$Trimestre, format = "%y/0%q")
Asales
Asales1 <- xts(IngresosApple$Ingresos, order.by = Asales)
Asales1 <- xts((IngresosApple$Ingresos),order.by=as.POSIXct(strptime(IngresosApple$Trimestre,"%y/0%q")))
IngresosApple[['trimestre']] <- as.Date(IngresosApple[['trimestre']], format="%y/0%q")
IngresosApple[['trimestre']] <- as.Date(IngresosApple[['trimestre']], format="%y.%q")
date <- seq(as.Date("2008-04-01")
as.Date("2017-09-01"), by = "quarter")
date <- seq(as.Date("2008-04-01"),
as.Date("2017-09-01"), by = "quarter")
date
Ingapple <- mutate(IngresosApple, trimestre = date)
library(dplyr)
Ingapple <- mutate(IngresosApple, trimestre = date)
View(Ingapple)
Ingapple <- mutate(IngresosApple, date = date)
Ingapple
Asales1 <- xts((Ingapple$Ingresos),order.by=as.Date(apple$date,"%Y/%m/%d", frequency = 4))
Asales1 <- xts((Ingapple$Ingresos),order.by=as.Date(Ingapple$date,"%Y/%m/%d", frequency = 4))
#set training data, test data
train<-window(Asales,start=c(2008,1), end=c(2016,4))
View(Asales1)
xts
Asales <- xts((Ingapple$Ingresos),order.by=as.Date(Ingapple$date,"%Y/%m/%d", frequency = 4))
Asales= to.quarterly(Asales)
View(Asales)
#set training data, test data
train<-window(Asales,start=c(2008), end=c(2016,4))
zasales = as.zoo(Asales$xIngresos.Close)
zasales = as.zoo(Asales$Asales.Close)
zasales = as.zoo(Asales$Asales.Close)
autoplot(zsales)+ylab("Ventas")+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")
zasales = as.zoo(Asales$Asales.Close)
autoplot(zasales)+ylab("Ventas")+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")
df_new <- data.frame(value = as.vector(zasales),
time = time(zasales))
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ylab("Ventas")+ggtitle("Ventas Trimestrales CocaCola")+xlab("Trimestres")
zlVentas=log(zasales)
df_newl <- data.frame(value = as.vector(zlVentas),
time = time(zlVentas))
ggplot(df_newl)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ylab("Ventas")+ggtitle("Ventas Trimestrales LOG CocaCola")+xlab("Trimestres")
ggtsdisplay(zlVentas)
ggtsdisplay(diff(zlVentas,4))
#Select number of observation to compare forecast
cOmit=6
#Data Size
nObs=length(zasales)
#sub_sample
oVentas <- window(zasales,start=index(zasales[1]),end=index(zasales[nObs-cOmit]))
#out sample (real data to forecast performance)
pVentas <- window(zasales,start=index(zasales[nObs-cOmit+1]),end=index(zasales[nObs]))
fit1=auto.arima(oVentas,lambda=0)
summary(fit1)
#residual analysis
ggtsdisplay(fit1$residuals)
#box-Ljung Test
Box.test(fit1$residuals,lag=4, fitdf=3, type="Lj")
#box-Ljung Test
Box.test(fit1$residuals,lag=4, fitdf=3, type="Lj")
Box.test(fit1$residuals,lag=8, fitdf=3, type="Lj")
Box.test(fit1$residuals,lag=12, fitdf=3, type="Lj")
fventas.arima=forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fventas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción CocaCola")
fventas.arima
autoplot(fit1)
autoplot(fit1$residuals)
tsVentas=ts(coredata(zsales),frequency = 4)
tsVentas=ts(coredata(zasales),frequency = 4)
tsVentas
ggfreqplot(tsVentas,freq=4,nrow=1,facet.labeller=c("1T","2T","3T","4T"))+ggtitle("Primas Trimestrales")
library(fpp)
library(knitr)
library(vars)
library(forecastHybrid)
library(rmarkdown)
library(xts)
require(forecast)
require(xts)
require(ggplot2)
library(TSstudio)
library(readr)
library(dplyr)
require(forecast)
require(xts)
require(ggplot2)
library(ggfortify)
install.packages("ggfortify")
library(fpp)
library(knitr)
library(vars)
library(forecastHybrid)
library(rmarkdown)
library(xts)
require(forecast)
require(xts)
require(ggplot2)
library(TSstudio)
library(readr)
library(dplyr)
require(forecast)
require(xts)
require(ggplot2)
library(ggfortify)
IngresosApple <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
tsVentas=ts(coredata(zasales),frequency = 4)
ggfreqplot(tsVentas,freq=4,nrow=1,facet.labeller=c("1T","2T","3T","4T"))+ggtitle("Primas Trimestrales")
plot(tsVentas)
stl(tsVentas[, 1], s.window = "periodic")
stl(tsVentas[, 1], s.window = "periodic")
#Decompose a time series into seasonal, trend and irregular components using loess
plot(stl(tsVentas[, 1], s.window = "periodic"))
#Eliminamos los 4 primeros trimestre.
#Select number of observation to compare forecast
cOmit=4
#Data Size
nObs=length(zasales)
#sub_sample
#oVentas=zVentas[1:(nObs-cOmit),]
oVentas <- window(zasales,start=index(zasales[1]),end=index(zasales[nObs-cOmit]))
#Fit Simple Exponential Smoothing
fit1 <- ses(oVentas)
#Fit Holt
fit2 <- holt(oVentas)
#Fit Holt- exponential
fit3 <- holt(oVentas,exponential=TRUE,initial="simple")
#Fit Holt - damped
fit4 <- holt(oVentas,damped=TRUE)
#Fit Holt - (exponential+damped)
fit5 <- holt(oVentas,exponential=TRUE,damped=TRUE)
# Results for first model:
fit1$model
plot(fit3, type="o", ylab="Primas",  flwd=1, plot.conf=FALSE)
lines(window(zasales),type="o")
lines(fit1$mean,col=2)
lines(fit2$mean,col=3)
lines(fit4$mean,col=5)
lines(fit5$mean,col=6)
legend("topleft", lty=1, pch=1, col=1:6,
c("Data","SES","Holt's","Exponential",
"Additive Damped","Multiplicative Damped"))
AIC(fit1, fit2, fit3, fit4, fit5)
AIC(fit1, fit2, fit3)
summary(fit1)
summary(fit5)
summary(fit1)
summary(fit2)
summary(fit3)
summary(fit4)
summary(fit5)
fit6 <- hw(oVentas,seasonal="additive")
fit7 <- hw(oVentas,seasonal="multiplicative")
#Plot models
plot(fit7,ylab="Primas",
plot.conf=FALSE, type="o", fcol="white", xlab="Year")
lines(window(zVentas),type="o",col="blue")
lines(window(zasales),type="o",col="blue")
#Plot models
plot(fit7,ylab="Primas",
plot.conf=FALSE, type="o", fcol="white", xlab="Year")
lines(window(zasales),type="o",col="blue")
lines(fitted(fit6), col="red", lty=2)
lines(fitted(fit7), col="green", lty=2)
lines(fit6$mean, type="o", col="red")
lines(fit7$mean, type="o", col="green")
legend("topleft",lty=1, pch=1, col=1:3,
c("data","Holt Winters' Additive","Holt Winters' Multiplicative"))
#Calculate Components
states <- cbind(fit6$model$states[,1:3],fit7$model$states[,1:3])
colnames(states) <- c("level","slope","seasonal","level","slope","seasonal")
plot(states, xlab="Year")
fventas.arima=forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fventas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción CocaCola")
require(forecast)
require(xts)
require(ggplot2)
library(readr)
IngresosApple <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(IngresosApple)
library(readr)
IngresosApple <- read_delim("IngresosApple.csv",
";", escape_double = FALSE, trim_ws = TRUE)
fechas <- seq(as.Date("2008-04-01"), as.Date("2017-09-30"), by = "quarter")
apple <- mutate(IngresosApple, fecha = fechas)
library(dplyr)
fechas <- seq(as.Date("2008-04-01"), as.Date("2017-09-30"), by = "quarter")
apple <- mutate(IngresosApple, fecha = fechas)
str(apple)
Sales = xts(apple$ingresos, order.by = as.Date(apple$fecha, "%Y/%m/%d"), frequency = 4)
Sales = to.quarterly(Sales)
Sales = xts(apple$ingresos, order.by = as.Date(apple$fecha, "%Y/%m/%d"), frequency = 4)
Sales = to.quarterly(Sales)
Sales = xts(apple$Ingresos, order.by = as.Date(apple$fecha, "%Y/%m/%d"), frequency = 4)
Sales = to.quarterly(Sales)
Sales = xts(apple$Ingresos, order.by = as.Date(apple$fecha, "%Y/%m/%d"), frequency = 4)
Sales = to.quarterly(Sales)
zVentas=as.zoo(Sales$Sales.Close)
zVentas=as.zoo(Sales$Sales.Close)
autoplot(zVentas)+ylab("Ventas")+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")
install.packages("fpp2")
library(ffp)
library(ffp2)
library(ffp2)
library(fpp2)
Para ello vamos a calcular la primera diferencia, con el objetivo de eliminar la tendencia
DY <- diff(zVentas)
DY <- diff(zVentas)
#Dibujamos la gráfica también
autoplot(DY) +
ggtitle("Cambios de un trimestre a otro") +
ylab("Millones de dolares")
ggseasonplot(DY) +
ggtitle("Estacionalidad en los trimestres") +
ylab("Millions dollars")
ggseasonplot(DY) +
ggtitle("Estacionalidad en los trimestres") +
ylab("Millions dollars")
ggsubseriesplot(DY) +
ggtitle("Estacionalidad en los trimestres") +
ylab("Millions dollars")
plot(aggregate(zVentas, FUN = mean))
plot(aggregate(zVentas, FUN = mean))
View(Sales)
Y = ts(Sales[,2],start = "2008 Q2", frequency = 4)
zVentas=as.zoo(Sales$Sales.Close)
autoplot(zVentas)+ylab("Ventas")+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")
zVentas=as.zoo(Sales$Sales.Close)
ggplot(zVentas, aes(x = time, y = sales)) +
geom_line(col = "hotpink") + ylim(0, 800) +
scale_x_date(date_labels = "%y %b") +
theme_bw() + theme(legend.title = element_blank(),
axis.text.x  = element_text(angle=45, vjust=0.5))
zVentas
autoplot(zVentas)+ylab("Ventas")+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")
ggtsdisplay(zVentas)
zlVentas=log(zVentas)
df_newl <- data.frame(value = as.vector(zlVentas),
time = time(zlVentas))
ggplot(df_newl)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ylab("Ventas")+ggtitle("Ventas Trimestrales LOG CocaCola")+xlab("Trimestres")
ggtsdisplay(zlVentas)
#Select number of observation to compare forecast
cOmit=6
#Data Size
nObs=length(zVentas)
#sub_sample
oVentas <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
#out sample (real data to forecast performance)
pVentas <- window(zVentas,start=index(zVentas[nObs-cOmit+1]),end=index(zVentas[nObs]))
fit1=auto.arima(oVentas,lambda=0)
summary(fit1)
ggtsdisplay(diff(zlVentas))
ggtsdisplay(diff(zlVentas))
adf.test(diff(zlVentas)), alternative = "stationary")
count_d1ggtsdisplay(diff(zlVentas))
count_d1 =ggtsdisplay(diff(zlVentas))
```{r}
count_d1 =ggtsdisplay(diff(zlVentas))
count_d1
adf.test(count_d1, alternative = "stationary")
require(forecast)
require(xts)
require(ggplot2)
library(fpp2)
library(dplyr)
library(reshape)
install.packages("reshape")
require(forecast)
require(xts)
require(ggplot2)
library(fpp2)
library(dplyr)
library(reshape)
library(tidyverse)
library(tseries)
adf.test(count_d1, alternative = "stationary")
#Select number of observation to compare forecast
cOmit=6
#Data Size
nObs=length(zVentas)
#sub_sample
oVentas <- window(zVentas,start=index(zVentas[1]),end=index(zVentas[nObs-cOmit]))
#out sample (real data to forecast performance)
pVentas <- window(zVentas,start=index(zVentas[nObs-cOmit+1]),end=index(zVentas[nObs]))
fit1=auto.arima(oVentas,lambda=0)
summary(fit1)
modeloarima<-auto.arima(oVentas, seasonal=FALSE)
modeloarima
tsdisplay(residuals(modeloarima), lag.max=10, main='(3,1,1) Model Residuals')
prediccion <- forecast(modeloarima, h=30)
plot(prediccion)
fventas.arima = forecast(fit1)
fventas.arima = forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fventas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción CocaCola")
ggplot(zVentas)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fventas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción CocaCola")
plot(prediccion
prediccion <- forecast(modeloarima, h=30)
plot(prediccion)
modeloarima<-auto.arima(oVentas, seasonal=FALSE)
modeloarima
tsdisplay(residuals(fit1), lag.max=10, main='(3,1,1) Model Residuals')
fventas.arima=forecast(fit1)
df_new <- data.frame(value = as.vector(zVentas),
time = time(zVentas))
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ylab("Ventas")+ggtitle("Ventas Trimestrales Apple")+xlab("Trimestres")
fventas.arima=forecast(fit1)
ggplot(df_new)+geom_point(aes(x=time,y=value))+geom_line(aes(x=time,y=value))+ geom_forecast(fventas.arima,alpha=0.4)+ggtitle("ARIMA: Predicción Apple")
fventas.arima
